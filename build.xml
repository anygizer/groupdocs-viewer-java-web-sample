<?xml version="1.0" ?> 
<project name="document-viewer" default="war">
    <property file="build.properties"/>


	<path id="project.classpath">
        <fileset dir="${project.lib.dir}" includes="*.jar"/>
        <fileset dir="${project.m2.home}" includes="${project.viewer.path}" />
        <fileset dir="${project.tomcat.home}/lib/" includes="*.jar" />
        <fileset dir="src" includes="log4j.properties"/>
	</path>
	
	<target name="init" depends="clean">
        <assertDirAvailable dir="${project.tomcat.home}" />
        <echo>Creating the build directory</echo>
        <mkdir dir="${project.build.dir}/WEB-INF/classes"/>
        <mkdir dir="${project.build.dir}/WEB-INF/lib"/>
    </target>
	
	<target name="compile" depends="init" description="Compile project">
        <echo>Compile the source files</echo>
        <javac srcdir="${project.src.dir}" destdir="${project.build.dir}/WEB-INF/classes">
            <classpath refid="project.classpath"/>
        </javac>
	</target>

    <target name="copy" depends="compile" >
        <copy todir="${project.build.dir}/WEB-INF">
            <fileset dir="${project.conf.dir}"/>
        </copy>
        <copy todir="${project.build.dir}/META-INF">
            <fileset dir="${project.meta.dir}"/>
        </copy>
        <copy todir="${project.build.dir}/WEB-INF/lib">
            <fileset dir="${project.lib.dir}"/>
            <fileset file="${project.m2.home}/${project.viewer.path}" />
        </copy>
        <copy todir="${project.build.dir}/viewer">
            <fileset dir="${project.view.dir}"/>
        </copy>
        <copy todir="${project.build.dir}/WEB-INF/classes">
            <fileset dir="src"/>
        </copy>
    </target>

    <target name="war" depends="copy" description="Create war file">
        <echo>Building the war file</echo>
        <war destfile="${project.dist.dir}/document-viewer.war" webxml="${project.build.dir}/WEB-INF/web.xml">
            <fileset dir="${project.build.dir}"/>
        </war>
	</target>
	
	<target name="clean">
        <echo>Cleaning the ${project.build.dir}</echo>
		<delete dir="${project.build.dir}" />
        <echo>Cleaning the ${project.dist.dir}</echo>
		<delete dir="${project.dist.dir}" />
        <echo>Cleaning the out</echo>
        <delete dir="out" />
	</target>

    <macrodef name="assertDirAvailable">
        <attribute name="dir" />
        <sequential>
            <fail message="ERROR: The directory '@{dir}' was expected to be available but is not">
                <condition>
                    <not>
                        <available file="@{dir}" type="dir" />
                    </not>
                </condition>
            </fail>
        </sequential>
    </macrodef>

</project>
